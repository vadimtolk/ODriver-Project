'use strict';

const TelegramBot = require('node-telegram-bot-api');
const { callbackQuery } = require('telegraf/filters');
const { inlineKeyboard, button } = require('telegraf/markup');
const TOKEN = 'your token';
const bot = new TelegramBot(TOKEN, { polling: {interval: 1000, autoStart: true}});

const CEO_ID = 2110633873;
const CHANNEL_ID = -1002339136855;
const BAN_LIST = {};

bot.on('polling_error', err => console.log('error'));

let go = 1000, rev = 0;

function keyBoard() {
    return {   
        reply_markup: {
            inline_keyboard: [

            [
                { text: '–î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å ‚ôæÔ∏è', callback_data: 'button3' }
            ],

            [
                { text: '–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É & –≤—Ä–µ–º—è ‚è±Ô∏è', callback_data: 'button4' }
            ],

            [
                { text: '–î–æ–±–∞–≤–∏—Ç—å —Ü–µ–Ω—É üí∏', callback_data: 'button5' }
            ],

            [
                { text: '–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è ‚úçÔ∏è', callback_data: 'button6' }
            ],

            [
                { text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç ‚úÖ', callback_data: 'button7' }
            ],

            [
                {text: '–û—Ç–º–µ–Ω–∞ ‚è¨', callback_data: 'cancelBtn'}
            ]
          ]
        }
    };
}

function getTripTag() {
    return go += 1;
}

function getReviewTag() {
    return rev += 1;
}

class User {
    static users = {};

    constructor(id, username = null, nickname = 'guest', date, number = null) {
        this._username = username;
        this._nickname = nickname;
        this._id = id;
        this.date = date;
        this.number = number;

        this.review = {length: 0};
        this.tripList = {};

        this.statictic = {
            premium: '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ ‚ûñ',
            trips: 0,
            description: '–ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚úçÔ∏è',
        };
    }

    getUserInfo() {
        return `ü™™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : ${this._nickname} (${this._username}) : \n\nüï∞ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è : ${this.date} \n\n‚ñ∂Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ OgarevPremium : ${this.statictic.premium} \n‚ñ∂Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫ : ${this.statictic.trips} üìå\n‚ñ∂Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ : ${this.statictic.description}`;
    }

    getUserReviews() {
        let msg = '';

        for (let [key, value] of Object.entries(this.review)) {
            if (key === 'length') continue;
            msg += value + '\n\n';
        }

        return (msg === '') ? 0 : msg;
    }

    getUserTrips() {
        let msg = '';

        for (let [key, value] of Object.entries(this.tripList)) {
            msg += `${key} : ${value} \n\n`;
        }

        return (msg === '') ? 0 : msg;
    }
}

class Trip {
    static trips = {};

    constructor(userId, nickname, trip = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', time = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', tag, price = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', description = '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', isDriver = false) {
        this.userId = userId;
        this.nickname = nickname;
        this.price = price;
        this.isDriver = isDriver;
        this.trip = trip;
        this.time = time;
        this.tag = tag;
        this.description = description;
        this.canBePlace = '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ... üîú';
    }

    getAncetInfo() {
        return `üöó –ú–∞—Ä—à—Ä—É—Ç <code>#${this.tag}</code> : \n\n‚ñ∂Ô∏è –ü—É—Ç—å : ${this.trip} üìö\n‚ñ∂Ô∏è –í—Ä–µ–º—è : ${this.time} üóì\n‚ñ∂Ô∏è –¶–µ–Ω–∞ : ${this.price} üí∏\n‚ñ∂Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏—è : ${this.description} üìí\n‚ñ∂Ô∏è –°—Ç–∞—Ç—É—Å : ${this.canBePlace} \n\n‚ñ∂Ô∏è ${this.isDriver} : <b>${this.nickname}</b> ü™™`;
    }
}

console.log('started');

const commands = [
    {command: 'start', description: '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'},
    {command: 'create_trip', description: '–°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç'},
    {command: 'my_trips', description: '–ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã'},
    {command: 'my_profile', description: '–ü—Ä–æ—Ñ–∏–ª—å'},
    {command: 'set_description', description: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ'},
    {command: 'donate', description: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'},
    {command: 'info', description: '–û –ø—Ä–æ–µ–∫—Ç–µ'}
];

bot.setMyCommands(commands);

bot.on('text', async (ctx) => {
    const id = ctx.from.id;

    const options = {
        reply_markup: {
          inline_keyboard: [
            [
                { text: '–î–∞ ‚ùáÔ∏è', callback_data: 'button1' }
            ],

            [
                { text: '–ù–µ—Ç ‚ùå', callback_data: 'button2' }
            ]
          ]
        }
      };

    if (ctx.text === '/start' && !User.users[id]) await bot.sendMessage(id, 'üëã –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –Ω–∞ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ø–æ –ø–æ–∏—Å–∫—É –ø–æ–ø—É—Ç—á–∏–∫–∞! \n\n‚úÖ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∞–º —Å–ª–µ–¥—É–µ—Ç –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ù–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏  —é–∑–µ—Ä–Ω–µ–π–º \n\n üîñ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª @ODriver13 —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã\n\nü§ù P.S –í–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, —Ç–∞–∫ –±–µ–∑ –Ω–µ–≥–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n\nüìå–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?', {reply_markup: options.reply_markup});
    if (ctx.text === '/start' && User.users[id]) await bot.sendMessage(id, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${User.users[id]._nickname}. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ —É–¥–∞—á–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫!`);
});

bot.on('text', async (ctx) => {

    if (ctx.text === '/my_profile' && User.users[ctx.from.id]) {
        const keyb2 = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: '–ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã üìö', callback_data: 'button12'}
                    ], 

                    [
                        {text: `–ú–æ–∏ –æ—Ç–∑—ã–≤—ã üìä (${User.users[ctx.from.id].review.length})`, callback_data: 'button20'}
                    ]
                ]
            }
        }

        await bot.sendMessage(ctx.from.id, User.users[ctx.from.id].getUserInfo(), {reply_markup: keyb2.reply_markup});
    } 

    if (ctx.text === '/my_profile' && !User.users[ctx.from.id]) {
        await bot.sendMessage(ctx.from.id, '–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚úÖ /start');
    }
});

const ban = /\!ban.+/
bot.on('text', async (ctx) => {
    if (ban.test(ctx.text) && ctx.from.id === CEO_ID) {
        const banned = ctx.text.slice(4, 16)
        BAN_LIST[banned] = 'banned.';

        await bot.sendMessage(CEO_ID, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${banned} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
    } 
});

bot.on('text', async (ctx) => {
    if (BAN_LIST[ctx.from.id]) { 
        await bot.sendMessage(ctx.from.id, `–í—ã –±—ã–ª–∏ –Ω–∞–≤—Å–µ–≥–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.`);
        return;
    }
});

bot.on('text', async (ctx) => {
    if (ctx.text === '/donate') {
        await bot.sendMessage(ctx.from.id, '–ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —ç–∫–≤–∞–π—Ä–∏–Ω–≥ –∏–ª–∏ –¥–æ–Ω–∞—Ç –≤ –≤–∏–¥–µ –∑–≤–µ–∑–¥');
    }
});

bot.on('text', async (ctx) => {
    if (ctx.text === '/info') {
        const keyb1 = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: '–ß–∏—Ç–∞—Ç—å üìñ', url: `https://telegra.ph/Bot-pomoshchnik-dlya-poiska-poputchika-11-19`}
                    ]
                ]
            }
        };

        await bot.sendMessage(ctx.from.id, '–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ Telegraf - —Å—Ç–∞—Ç—å—è ‚è¨', {reply_markup: keyb1.reply_markup});
    }
});

try {
    bot.on('callback_query', async (callbackQuery) => {
        const chatId = callbackQuery.from.id;
        const action = callbackQuery.data;
    
        const options = {
            reply_markup: {
                keyboard: [
                    [
                        {
                            text: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ‚úÖ",
                            request_contact: true
                        }
                    ]
                ],
                resize_keyboard: true
            }
        };
    
        if (action === 'button1') {
            let username;
    
            if (callbackQuery.from.username) username = '@' + callbackQuery.from.username;
            else username = '–±–µ–∑ —é–∑–µ—Ä–∞';
        
            let name = callbackQuery.from.first_name;
            let id = callbackQuery.from.id;
    
            let date = new Date();
            let year = String(date.getFullYear()).padStart(2, '0');
            let month = String(date.getMonth() + 1).padStart(2, '0');
            let day = String(date.getDate()).padStart(2, '0');
    
            let targetDate = `${day}.${month}.${year}`;
    
            User.users[id] = new User(id, username, name, targetDate);
            (User.users[id]._id === CEO_ID) ? User.users[id].statictic.premium = 'CEO üî∞' : User.users[id].statictic.premium;
    
            await bot.sendMessage(chatId, `üåü –û—Ç–ª–∏—á–Ω–æ. –í—ã –ø–æ—á—Ç–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –≤ —á–∞—Ç —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"`, {reply_markup: options.reply_markup});
            return;
    
        }
    
        if (action === 'button2') {
            await bot.sendMessage(chatId, `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ûñ`);
            return;
        }
    });
} catch (err) {
    console.warn(err);
}

try {
    bot.on('message', async (msg) => {
        const chatId = msg.from.id;
    
        if (msg.contact && msg.from.username) {
            const phoneNumber = msg.contact.phone_number;
            User.users[chatId].number = phoneNumber;
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–µ–ª–∏–ª—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phoneNumber} | ID : ${User.users[chatId]._id}`);
            await bot.sendMessage(chatId, `ü§ù –û—Ç–ª–∏—á–Ω–æ! –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. \n\n ${User.users[chatId].getUserInfo()}`, { reply_markup: {remove_keyboard: true} });
            return;
        }
        
        if (msg.contact && !msg.from.username) {
            await bot.sendMessage(chatId, '–£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è —á—Ç–æ–±—ã —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–≤—è–∑–∞—Ç—å—Å—è.');
        }
    });
} catch (err) {
    console.warn(err)
}

const waiter = {};

try {
    bot.on('text', async (ctx) => {
        const id = ctx.from.id;
    
        if (ctx.text === '/set_description') {
    
            //console.log(id);
    
            if (User.users[id]) {
                await bot.sendMessage(id, '–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. ‚úçÔ∏è');
                waiter[id] = true;
                //console.log(waiter.valueOf());
                return;
            }
    
            await bot.sendMessage(id, '‚úçÔ∏è –ü—Ä–µ–∂–¥–µ —á–µ–º –º–µ–Ω—è—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start');
        }
    
        else if (waiter[id]) {
            User.users[id].statictic.description = ctx.text;
            await bot.sendMessage(id, `‚úÖ –í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! \n\n ${User.users[id].getUserInfo()}`);
            delete waiter[id];
        }
    });
} catch (err) {
    console.warn(err)
}

let tag;
let step = false;
let currentId = null;

bot.on('text', async (ctx) => {
    if (ctx.text === '/create_trip' && !User.users[ctx.from.id]) {
        await bot.sendMessage(ctx.from.id, '–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é /start');
        return;
    }

    if (ctx.text === '/create_trip' && !User.users[ctx.from.id].number) {
        await bot.sendMessage(ctx.from.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ‚úÖ" —Ä—è–¥–æ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.');
        return;
    }

    if (ctx.text === '/create_trip' && User.users[ctx.from.id]) {
        // console.log('current  ' + currentId);
        if (step === true) {
            const chatId = ctx.from.id;
            if (currentId === chatId) return;

            await bot.sendMessage(chatId, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç ‚ù§Ô∏è');
            return;
        }

        currentId = ctx.from.id;
        step = true;
        const options = {
            reply_markup: {
              inline_keyboard: [
                [
                    { text: '–Ø –≤–æ–¥–∏—Ç–µ–ª—å', callback_data: 'button8' }, { text: '–Ø –ø–∞—Å—Å–∞–∂–∏—Ä', callback_data: 'button9' }
                ],
                [
                    {text: '–û—Ç–º–µ–Ω–∞ ‚è¨', callback_data: 'cancelBtn'}
                ]
              ]
            }
          };

    tag = getTripTag();

    Trip.trips[tag] = new Trip(ctx.from.id, ctx.from.first_name, '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', tag, '–Ω–µ —É–∫–∞–∑–∞–Ω–æ', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ');

    await bot.sendMessage(ctx.from.id, '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É. –ù–æ —Å–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –∫–µ–º –≤—ã –±—É–¥–µ—Ç–µ —è–≤–ª—è—Ç—å—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞', {reply_markup: options.reply_markup});
    }
});

const mess = {};
const waiter1 = {};

try {
    bot.on('callback_query', async (callbackQuery) => {
        const action = callbackQuery.data;
        const chatId = callbackQuery.from.id; 
        const msgId = callbackQuery.message.message_id; 
        mess[chatId] = msgId;
    
        waiter1[chatId] = {};
    
        //console.log(currentId);
        
        // console.log(mess[chatId]);
        // console.log(chatId);
        if (action === 'cancelBtn') {
            currentId = null;
            step = false;

            await bot.editMessageText('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ ‚ùå', {
                chat_id: chatId,
                message_id: mess[chatId],
            });
        }
        
        if (action === 'button3') {
            await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –º–∞—Ä—à—Ä—É—Ç (–≥–¥–µ –æ–Ω –Ω–∞—á–Ω–µ—Ç—Å—è –∏ –≥–¥–µ –æ–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è), –Ω–∞–ø—Ä–∏–º–µ—Ä : –ö–æ–ª—å—Ü–µ–≤–∞—è - –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–ª–∏ –í–µ—Å–µ–ª–æ–≤—Å–∫–æ–≥–æ 40 - –ü–æ–ª–µ–∂–∞–µ–≤–∞ 34');
            waiter1[chatId].b3 = true;
        }
    
        if (action === 'button4') {
            await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É (–≤—Ä–µ–º—è), –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ–µ–∑–∂–∞—Ç—å –º–∏–º–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞—á–∞–ª–∞ –ø—É—Ç–∏ (–µ—Å–ª–∏ –≤—ã –≤–æ–¥–∏—Ç–µ–ª—å) –∏–ª–∏ –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ');
            waiter1[chatId].b4 = true;
        }
    
        if (action === 'button5') {
            await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å (–µ—Å–ª–∏ –≤—ã –ø–∞—Å—Å–∞–∂–∏—Ä) –∏–ª–∏ –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–¥–≤–µ–∑—Ç–∏ (–µ—Å–ª–∏ –≤—ã –≤–æ–¥–∏—Ç–µ–ª—å)');
            waiter1[chatId].b5 = true;
        }
    
        if (action === 'button6') {
            await bot.sendMessage(chatId, '–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∏ —Ç–æ–º—É –ø–æ–¥–æ–±–Ω–æ–µ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é).');
            waiter1[chatId].b6 = true;
        }
    
        if (action === 'button8') {
            Trip.trips[tag].isDriver = '–í–æ–¥–∏—Ç–µ–ª—å';
            const options = keyBoard();
            await bot.editMessageText(`–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"`, {chat_id: chatId, message_id: mess[chatId], reply_markup: options.reply_markup});
        }
    
        if (action === 'button9') {
            Trip.trips[tag].isDriver = '–ü–∞—Å—Å–∞–∂–∏—Ä';
            const options = keyBoard();
        
            await bot.editMessageText(
                `–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç"`,
                {
                    chat_id: chatId,
                    message_id: mess[chatId],
                    reply_markup: options.reply_markup 
                });
            }
    
        if (action === 'button7') {
                const keyb1 = {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {text: '–î–∞', callback_data: 'button10'}
                                ],
    
                                [
                                    {text: '–ù–µ—Ç', callback_data: 'button11'}
                                ]
                            ]
                        }
                    };
    
                await bot.sendMessage(CEO_ID,`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —Ö–æ—á–µ—Ç —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç : \n\n ${Trip.trips[tag]?.getAncetInfo()}`, {reply_markup: keyb1.reply_markup, parse_mode: 'HTML'});
                await bot.sendMessage(chatId, `–û—Ç–ª–∏—á–Ω–æ. –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞. –°–µ–π—á–∞—Å –æ–Ω–∞ –ø—Ä–æ–π–¥–µ—Ç –±—ã—Å—Ç—Ä—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ. \n\n ${Trip.trips[tag]?.getAncetInfo()}`, {parse_mode: 'HTML'});
                
                let whatAdd = Trip.trips[tag].getAncetInfo();
                User.users[callbackQuery.from.id].tripList[tag] = whatAdd;
                // console.log(whatAdd);
                // console.log(User.users[chatId].tripList[tag]);
        }
    });
} catch (err) {
    console.log(err);
}

bot.on('text', async (ctx) => {
    const chatId = ctx.from.id;

    const options = keyBoard();

    if (waiter1?.[chatId]?.b3) {
        Trip.trips[tag].trip = ctx.text;
        await bot.sendMessage(ctx.from.id, `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø—É—Ç—å ${Trip.trips[tag].trip}. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.`, {reply_markup: options.reply_markup});
        delete waiter1[chatId].b3;
    }
});

try {
    bot.on('text', async (ctx) => {
        const options = keyBoard();
    
        if (waiter1?.[ctx.from.id]?.b4) {
            Trip.trips[tag].time = ctx.text;
            await bot.sendMessage(ctx.from.id, `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤—Ä–µ–º—è ${Trip.trips[tag].time}. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.`, {reply_markup: options.reply_markup});
            delete waiter1[ctx.from.id].b4;
        }
    });
    
    bot.on('text', async (ctx) => {
        const options = keyBoard();
    
        if (waiter1?.[ctx.from.id]?.b5) {
            Trip.trips[tag].price = ctx.text;
            await bot.sendMessage(ctx.from.id, `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ü–µ–Ω—É ${Trip.trips[tag].price}. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.`, {reply_markup: options.reply_markup});
            delete waiter1[ctx.from.id].b5;
        }
    });
    
    bot.on('text', async (ctx) => {
        const options = keyBoard();
    
        if (waiter1?.[ctx.from.id]?.b6) {
            Trip.trips[tag].description = ctx.text;
            await bot.sendMessage(ctx.from.id, `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –¥–æ–ø. —Å–≤–µ–¥–µ–Ω–∏—è ${Trip.trips[tag].description}. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ.`, {reply_markup: options.reply_markup});
            delete waiter1[ctx.from.id].b6;
        }
    });
    
    bot.on('text', async (ctx) => {
        if (ctx.text === '/my_trips') {
            if (User.users[ctx.from.id]?.tripList[tag]) {
                await bot.sendMessage(ctx.from.id, `${User.users[id].getUserTrips()} \n\n`, {parse_mode: 'HTML'});
            } else {
                await bot.sendMessage(ctx.from.id, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤. –î–æ–±–∞–≤–∏—Ç—å? /create_trip');
            }
        }
    });
} catch (err) {
    console.warn(err);
}

bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const msgId3 = callbackQuery.message.message_id;

    const keyb1 = {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚Ü©Ô∏è', callback_data: `buttonX`}
                        ]
                    ]
                }
            };

    const keyb2 = {
        reply_markup: {
            inline_keyboard: [
                [
                    {text: '–ú–æ–∏ –º–∞—Ä—à—Ä—É—Ç—ã üìö', callback_data: 'button12'}
                ]
            ]
        }
    }

    if (data === 'button10') {
        Trip.trips[tag].canBePlace = '–†–∞–∑—Ä–µ—à–µ–Ω ‚úÖ';
        User.users[currentId].tripList[tag] = Trip.trips[tag].getAncetInfo();
        await bot.sendMessage(CHANNEL_ID, Trip.trips[tag].getAncetInfo(), {parse_mode: 'HTML', reply_markup: keyb1.reply_markup});
        await bot.sendMessage(currentId, '–í–∞—à –º–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω! ‚úÖ', {reply_markup: keyb2.reply_markup});
        await bot.editMessageText(`${Trip.trips[tag].getAncetInfo()} \n\n –†–∞–∑—Ä–µ—à–µ–Ω.`, {chat_id: CEO_ID, message_id: msgId3, parse_mode: 'HTML'});
        currentId = null;
        step = false;
    }

    if (data === 'button11') {
        Trip.trips[tag].canBePlace = '–û—Ç–∫–ª–æ–Ω–µ–Ω ‚ùå';
        User.users[currentId].tripList[tag] = Trip.trips[tag].getAncetInfo();
        await bot.sendMessage(currentId, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –≤—ã–Ω—É–∂–¥–µ–Ω—ã –æ—Ç–∫–∞–∑–∞—Ç—å –í–∞–º –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑-–∑–∞ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ‚ùå');
        await bot.editMessageText(`${Trip.trips[tag].getAncetInfo()} \n\n –û—Ç–∫–∞–∑–∞–Ω–æ.`, {chat_id: CEO_ID, message_id: msgId3, parse_mode: 'HTML'});
        currentId = null;
        step = false;
    }
});

let profile = {};

function getId(objectWithTagAndId, searchTag) {
    for (let user in objectWithTagAndId) {
        const currentUser = objectWithTagAndId[user];
        
        for (let tag in currentUser.tripList) {
            if (tag === searchTag) return currentUser._id;
        }
    }

    return null;
}

bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const id = callbackQuery.from.id;
    const msgText = callbackQuery.message.text;

    if (data === 'button12' && User.users[id]?.getUserTrips()) {
        await bot.sendMessage(id, `${User.users[id].getUserTrips()} \n\n`, {parse_mode: 'HTML'});
    }

    if (data === 'button12' && !User.users[id]?.getUserTrips()) {
        await bot.sendMessage(id, `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤. –î–æ–±–∞–≤–∏—Ç—å? /create_trip`);
    }

    if (data === 'buttonX') {
        const tripTag = msgText.slice(12, 16);
        profile[id] = getId(User.users, tripTag);
        //console.log(profile[id] ? profile[id] : `${callbackQuery.from.id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`);

        if (!User.users?.[callbackQuery.from.id]) {
            await bot.answerCallbackQuery(callbackQuery.id, {text: '–ß—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∞–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!', show_alert: true});
            await bot.sendMessage(callbackQuery.from.id, `–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚û°Ô∏è /start`);
            return;
        }

        if (User.users[profile[id]]._id === callbackQuery.from.id) {
            await bot.answerCallbackQuery(callbackQuery.id, {text: '–≠—Ç–æ –≤—ã! :)', show_alert: true});
            return;
        }

        const key = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: '–°–≤—è–∑–∞—Ç—å—Å—è üîó', url: `https://t.me/${User.users[profile[id]]._username.slice(1)}`}
                    ],

                    [
                        {text: `üìä –û—Ç–∑—ã–≤—ã (${User.users[profile[id]].review.length})`, callback_data: 'buttonR'}
                    ]
                ]
            }
        };

        await bot.answerCallbackQuery(callbackQuery.id, {text: '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.', show_alert: true});
        await bot.sendMessage(callbackQuery.from.id, User.users[profile[id]].getUserInfo(), {reply_markup: key.reply_markup});
    }
    
    if (data === 'buttonR') {
        const userReviews = User.users[profile[id]]?.getUserReviews();

        if (userReviews) {
            await bot.sendMessage(callbackQuery.from.id, `üìå –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : \n\n ${userReviews} \n\n`);
            return;
        } else {
            await bot.sendMessage(callbackQuery.from.id, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ üìÇ');
            return;
        }
    }
});

bot.on('callback_query', async (callbackQuery) => {
    const data = callbackQuery.data;
    const userId = callbackQuery.from.id; 
    
    if (data === 'button20') {
        const userReviews = User.users[userId]?.getUserReviews();

        if (userReviews) {
            await bot.sendMessage(userId, `üìå –í–∞—à–∏ –æ—Ç–∑—ã–≤—ã : \n\n ${userReviews} \n\n`);
            return;
        } else {
            await bot.sendMessage(userId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏! /create_trip');
            return;
        }
    }
});

bot.on('text', async (ctx) => {
    if (ctx.text === '/admin1' && ctx.from.id === CEO_ID) {
        await bot.sendMessage(CEO_ID, JSON.stringify(User.users, null, 2));
    }

    if (ctx.text === '/admin2' && ctx.from.id === CEO_ID) {
        await bot.sendMessage(CEO_ID, JSON.stringify(Trip.trips, null, 2));
    }
});

const tripAdd = /add_trip.+\_.+/;
const revAdd = /add_rev.+\_.+\_.+/;

bot.on('text', async (ctx) => {
    if (tripAdd.test(ctx.text)) {

    const addId = +ctx.text.slice(8, 18);
    const addTrips = +ctx.text.slice(19);

    if (!User.users[addId] || isNaN(addTrips)) {
        await bot.sendMessage(CEO_ID, `–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å —á–∏—Å–ª–æ–º.`);
        return;
    }

    if (User.users[addId] && isFinite(addTrips)) {
        User.users[addId].statictic.trips += addTrips;
        await bot.sendMessage(CEO_ID, `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${addId} : \n\n ${addTrips} –ø–æ–µ–∑–¥–∫—É(-–æ–∫).`);
    }
}
});

bot.on('text', async (ctx) => {
    if (revAdd.test(ctx.text)) {

    let addId = +ctx.text.slice(7, 17);
    let addRev = ctx.text.slice(21);
    let rate = ctx.text.slice(18, 20);

    if (!User.users[addId]) {
        await bot.sendMessage(CEO_ID, `–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.`);
        return;
    }

    let tag = getReviewTag();

    User.users[addId].review[tag] = `${rate} : ${addRev}`;
    User.users[addId].review.length += 1;

    if (User.users[addId]) {
        const keyb2 = {
            reply_markup: {
                inline_keyboard: [
                    [
                        {text: `–ú–æ–∏ –æ—Ç–∑—ã–≤—ã üìä (${User.users[addId].review.length})`, callback_data: 'button20'}
                    ]
                ]
            }
        }

        await bot.sendMessage(CEO_ID, `–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${addId} : \n\n –û—Ç–∑—ã–≤: \n ${rate} : ${addRev}.`);
        await bot.sendMessage(addId, '–£ –≤–∞—Å –ø–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤! üì¨', {reply_markup: keyb2.reply_markup});
    }
}
});